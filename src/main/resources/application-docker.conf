include "application.base.conf"

tokenSystem {

  env = ${TOKEN_SVC_ENV}

  server {
    port = ${TOKEN_SVC_HTTP_SERVER_PORT}
    baseUrl = ${TOKEN_SVC_HTTP_SERVER_BASE_URL}
    swaggerPath = ${TOKEN_SVC_HTTP_SWAGGER_PATH}
  }

  metrics {
    prometheus {
      port = ${TOKEN_SVC_PROM_HTTP_PORT}
    }
  }

  executionContext {
    threadPoolSize = ${TOKEN_SVC_EXEC_THREAD_POOL_SIZE}
  }

  tokenGen {
    privKeyInHex = ${TOKEN_SVC_TOKEN_GEN_PRIVKEY_HEX}
  }

  tokenVerification {
    configURL = ${TOKEN_SVC_TOKEN_VER_CONFIG_URL}
    kid = ${TOKEN_SVC_TOKEN_VER_KID}
  }

  #The systems supports file based loading or env injection.
  #For a file description, see the clients.json as a example
  #For env loading, you can define
  #TOKEN_SVC_CLIENT_NAME_XXX
  #TOKEN_SVC_CLIENT_SECRET__XXX
  #Where XXX is an integer representing a composite. Use null to load from ENV.
  tokenClientsFile:  null
  tokenClientsFile: ${?TOKEN_SVC_TOKEN_CLIENTS_FILE}

  externalStateGetter {
    realmName = ${TOKEN_SVC_TOKEN_EXT_REAL_NAME}
    strictGroupCheck = false
    strictGroupCheck = ${?TOKEN_SVC_TOKEN_EXT_STRICT_GROUP_CHECK}
  }

}

cassandra {
  cluster {
    keyspace: ${TOKEN_SVC_CS_KEYSPACE}
    preparedStatementCacheSize: ${TOKEN_SVC_CS_PREPSTM_CACHE}
    //Comma-separeted values of IP/Hostname and ports
    contactPoints: ${TOKEN_SVC_CS_NODES}
    localDataCenter: ${TOKEN_SVC_CS_LOCAL_DATE_CENTER}
    //ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE
    consistencyLevel = ${TOKEN_SVC_CS_CONSISTENCY_LEVEL}
    serialConsistencyLevel = ${TOKEN_SVC_CS_SERIAL_CONSISTENCY_LEVEL}
    withSSL: ${TOKEN_SVC_CS_WITH_SSL}
    //When true, truststore and truststore password must be provided
    trustStore: ""
    trustStore: ${?TOKEN_SVC_CS_TRUST_STORE}
    trustStorePassword: ""
    trustStorePassword: ${?TOKEN_SVC_CS_TRUST_STORE_PASSWORD}
    username: ${TOKEN_SVC_CS_USERNAME}
    password: ${TOKEN_SVC_CS_PASSWORD}
  }
}
